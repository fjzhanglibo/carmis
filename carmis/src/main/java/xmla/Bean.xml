<?xml version="1.0" encoding="GBK"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
	
	<!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<!-- 并设置连接数据库的驱动、URL、用户名、密码，
	连接池最大连接数、最小连接数、初始连接数等参数  -->

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close"
		p:driverClass="com.mysql.jdbc.Driver"
		p:jdbcUrl="jdbc:mysql://localhost:3306/carMis"
		p:user="root"
		p:password="111111"
		p:maxPoolSize="200"
		p:minPoolSize="2"
		p:initialPoolSize="2"
		p:maxIdleTime="20"></bean>

	<!-- 定义Hibernate的SessionFactory，并依赖注入数据源，注入上面定义的dataSource -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<!-- annotatedClasses属性用于列出全部持久化类 -->
		<property name="annotatedClasses">
			<list>
				<!-- 以下用来列出Hibernate的持久化类 -->
				<value>mis.domain.Rights</value>
				<value>mis.domain.Part</value>
				<value>mis.domain.PartRights</value>
				<value>mis.domain.Department</value>
				<value>mis.domain.User</value>			
			</list>
		</property>
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<!-- 指定数据库方言、是否自动建表、是否生成SQL语句等 	-->
			<value>
			hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
			hibernate.hbm2ddl.auto=update
			hibernate.show_sql=true
			hibernate.format_sql=true
			#开启二级缓存
			hibernate.cache.use_second_level_cache=true
			#设置二级缓存的提供者
			hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory
			
			</value>
		</property>
	</bean>
	
	<!-- 配置DAO组件的模板 -->
	<bean id="daoTemplate" abstract="true" lazy-init="true"
		p:sessionFactory-ref="sessionFactory"/>
	<bean id="rightsDao"
		class="mis.dao.impl.RightsDaoHibernate4"
		parent="daoTemplate"/>
	<bean id="partDao"
		class="mis.dao.impl.PartDaoHibernate4"
		parent="daoTemplate"/>
	<bean id="partRightsDao"
		class="mis.dao.impl.PartRightsDaoHibernate4"
		parent="daoTemplate"/>
	<bean id="departmentDao"
		class="mis.dao.impl.DepartmentDaoHibernate4"
		parent="daoTemplate"/>
	<bean id="userDao"
		class="mis.dao.impl.UserDaoHibernate4"
		parent="daoTemplate"/>



	<!-- 定义业务逻辑组件模板,为之注入DAO组件 -->
	<bean id="managerTemplate" abstract="true" lazy-init="true"
		p:rightsDao-ref="rightsDao"
		p:partDao-ref="partDao"
		p:partRightsDao-ref="partRightsDao"
		p:departmentDao-ref="departmentDao"
		p:userDao-ref="userDao"/>

	<!-- 定义两个业务逻辑组件，继承业务逻辑组件的模板 -->
	<bean id="admManager"
		class="mis.service.impl.AdmManagerImpl"
		parent="managerTemplate"/>
		
			
	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 
		并注入SessionFactory的引用 -->
	<bean id="transactionManager" class=
		"org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory"/>	
	<!-- 配置事务增强处理Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true"/>
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切入点，匹配empManager和mgrManager
			两个Bean的所有方法的执行 -->
		<aop:pointcut id="leePointcut"
			expression="bean(admManager)"/>
		<!-- 指定在leePointcut切入点应用txAdvice事务增强处理 -->
		<aop:advisor advice-ref="txAdvice" 
			pointcut-ref="leePointcut"/>
	</aop:config>	

</beans>